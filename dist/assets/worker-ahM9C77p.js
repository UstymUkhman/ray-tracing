const ue=50;const fe=240,me=360;var M=Object.freeze({__proto__:null,height:240,log:!1,maxDepth:50,samples:500,width:360});const O=[13,2,3],q=[0,0,0],W=[0,1,0],$=20,H=.1,b=10,w=(a,e=0,t=1)=>Math.max(e,Math.min(a,t)),x=(a,e)=>Math.random()*(e-a)+a,V=a=>a*Math.PI/180,X=1/.06;class c{vec=[0,0,0];constructor(e=0,t=e,r=e){this.vec[0]=e,this.vec[1]=t,this.vec[2]=r}refract(e,t){const r=Math.min(this.clone.negate.dot(e),1);this.copy(e.clone.multiply(r).add(this).multiply(t));const i=Math.abs(1-this.lengthSquared);return this.add(e.multiply(-Math.sqrt(i)))}set(e,t,r){return this.vec[0]=e,this.vec[1]=t,this.vec[2]=r,this}multiply(e){if(typeof e!="number")return this.set(this.vec[0]*e.x,this.vec[1]*e.y,this.vec[2]*e.z);const t=e;return this.vec[0]*=t,this.vec[1]*=t,this.vec[2]*=t,this}divide(e){return typeof e=="number"?this.multiply(1/e):this.set(this.vec[0]/e.x,this.vec[1]/e.y,this.vec[2]/e.z)}random(e=0,t=1){return this.set(x(e,t),x(e,t),x(e,t))}reflect(e){return this.sub(e.clone.multiply(this.dot(e)*2))}get randomNormalized(){return this.randomUnitSphere.normalize}get randomUnitSphere(){for(;;)if(this.random(-1).lengthSquared<1)return this}get lengthSquared(){return this.dot(this)}get randomUnitDisk(){for(;;)if(this.random(-1),this.vec[2]=0,this.lengthSquared<1)return this}cross(e){return this.set(this.vec[1]*e.z-this.vec[2]*e.y,this.vec[2]*e.x-this.vec[0]*e.z,this.vec[0]*e.y-this.vec[1]*e.x)}dot(e){return this.vec[0]*e.x+this.vec[1]*e.y+this.vec[2]*e.z}copy(e){const{x:t,y:r,z:i}=e;return this.set(t,r,i)}add(e){return this.vec[0]+=e.x,this.vec[1]+=e.y,this.vec[2]+=e.z,this}sub(e){return this.vec[0]-=e.x,this.vec[1]-=e.y,this.vec[2]-=e.z,this}get nearZero(){return Math.abs(this.vec[0])<1e-8&&Math.abs(this.vec[1])<1e-8&&Math.abs(this.vec[2])<1e-8}get normalize(){return this.divide(this.length)}get length(){return Math.sqrt(this.lengthSquared)}get clone(){return new c(this.vec[0],this.vec[1],this.vec[2])}reset(e=0){return this.set(e,e,e)}get negate(){return this.multiply(-1)}get sqrt(){return this.set(Math.sqrt(this.vec[0]),Math.sqrt(this.vec[1]),Math.sqrt(this.vec[2]))}get rgb(){return this.set(w(this.vec[0]*256|0,0,255),w(this.vec[1]*256|0,0,255),w(this.vec[2]*256|0,0,255))}get x(){return this.vec[0]}get y(){return this.vec[1]}get z(){return this.vec[2]}get(){return this.vec}}class F{u;v;origin;vertical;lensRadius;horizontal;random=new c;lowerLeftCorner;constructor(){const e=new c(...O),t=Math.tan(V($)*.5)*2,r=e.clone.sub(new c(...q)).normalize;this.u=new c(...W).cross(r).normalize,this.v=r.clone.cross(this.u),this.origin=e;const i=360/240*t;this.lensRadius=H*.5,this.horizontal=this.u.clone.multiply(i).multiply(b),this.vertical=this.v.clone.multiply(t).multiply(b),this.lowerLeftCorner=this.origin.clone.sub(this.horizontal.clone.divide(2)).sub(this.vertical.clone.divide(2)).sub(r.multiply(b))}setRay(e,t,r){const i=this.random.randomUnitDisk.multiply(this.lensRadius),s=this.u.clone.multiply(i.x).add(this.v.clone.multiply(i.y));e.direction=this.lowerLeftCorner.clone.add(this.horizontal.clone.multiply(t)).add(this.vertical.clone.multiply(r)).sub(this.origin).sub(s),e.origin=s.add(this.origin)}get uniform(){return{lowerLeftCorner:this.lowerLeftCorner.get(),horizontal:this.horizontal.get(),vertical:this.vertical.get(),lensRadius:this.lensRadius,origin:this.origin.get(),v:this.v.get(),u:this.u.get()}}}const _=(a,e=1)=>new Map([["r",a>>16&e],["g",a>>8&e],["b",a&e]]),Y=(a,e)=>a.divide(e).sqrt.rgb,j=a=>`#${`000000${a.toString(16)}`.slice(-6)}`,pe=(a,e,t)=>{const r=new c;for(let i=0;i<a.length;i+=3){const{x:s,y:n,z:h}=Y(r.set(a[i],a[i+1],a[i+2]),t);e[i]=s,e[i+1]=n,e[i+2]=h}return e};class Z{t=0;frontFace=!1;material;point=new c;normal=new c;setFaceNormal(e,t){this.frontFace=e.direction.dot(t)<0,this.normal.copy(this.frontFace?t:t.negate)}}var l=new Z;class D{}class K extends D{objects=[];constructor(){super()}add(e){this.objects.push(e)}hit(e,t,r){let i=!1,s=r;for(let n=0,h=this.objects.length;n<h;n++)this.objects[n].hit(e,t,s)&&(s=l.t,i=!0);return i}get hittables(){return this.objects}dispose(){this.objects.length=0}}class U{}class y extends U{fuzz;albedo;direction=new c;constructor(e,t){super(),this.albedo=e.clone,this.fuzz=Math.min(t,1)}scatter(e,t,r){const i=e.direction.normalize.reflect(l.normal);return this.direction.randomUnitSphere.multiply(this.fuzz).add(i),t.direction=this.direction,t.origin=l.point,r.copy(this.albedo),this.direction.dot(l.normal)>0}}class T extends U{albedo;direction=new c;constructor(e){super(),this.albedo=e.clone}scatter(e,t,r){const i=l.normal.clone.add(this.direction.randomNormalized);return i.nearZero&&i.copy(l.normal),t.direction=i,t.origin=l.point,r.copy(this.albedo),!0}}class P extends U{constructor(e){super(),this.refraction=e}reflectance(e,t){const r=Math.pow((1-t)/(1+t),2);return Math.pow(1-e,5)*(1-r)+r}scatter(e,t,r){const i=e.direction.normalize,s=Math.min(i.clone.negate.dot(l.normal),1),n=l.frontFace?1/this.refraction:this.refraction;return Math.sqrt(1-s*s)*n>1||Math.random()<this.reflectance(s,n)?i.reflect(l.normal):i.refract(l.normal,n),t.direction=i,t.origin=l.point,r.reset(1),!0}}class z{list=new K;color=new c;constructor(){this.addSphere(1e3,new c(0,-1e3,0),new T(new c(.5))),this.generateSmallSpheres(),this.addSphere(1,new c(0,1,0),new P(1.5)),this.addSphere(1,new c(-4,1,0),new T(new c(.4,.2,.1))),this.addSphere(1,new c(4,1,0),new y(new c(.7,.6,.5),0))}addSphere(e,t,r){this.list.add(new Q(e,t,r))}createSpheresUniforms(){return this.hittables.map(e=>{const t=e,r={albedo:[1,1,1],extra:-1,type:0};return t.material instanceof y?(r.albedo=t.material.albedo.get(),r.extra=t.material.fuzz,r.type=1):t.material instanceof P?(r.extra=t.material.refraction,r.type=2):r.albedo=t.material.albedo.get(),{center:t.center.get(),radius:t.radius,material:r}})}generateSmallSpheres(){for(let e=-11;e<11;e++)for(let t=-11;t<11;t++){const r=new c(Math.random()*.9+e,.2,Math.random()*.9+t),i=new c(4,.2,0);if(r.clone.sub(i).length>.9){const s=Math.random();if(s<.8){this.color.random().multiply(this.color.random());const n=new T(this.color);this.addSphere(.2,r,n)}else if(s<.95){this.color.random(.5);const n=x(0,.5),h=new y(this.color,n);this.addSphere(.2,r,h)}else{const n=new P(1.5);this.addSphere(.2,r,n)}}}}get hittables(){return this.list.hittables}get objects(){return this.list}dispose(){this.list.dispose(),this.color.reset()}}class Q extends D{constructor(e,t,r){super(),this.radius=e,this.center=t,this.material=r}hit(e,t,r){const i=e.origin.clone.sub(this.center),s=e.direction.lengthSquared,n=i.dot(e.direction),h=i.lengthSquared-this.radius*this.radius,f=n*n-s*h;if(f<0)return!1;const o=Math.sqrt(f);let u=(-n-o)/s;if((u<t||u>r)&&(u=(-n+o)/s,u<t||u>r))return!1;l.point.copy(e.at(u));const d=l.point.clone.sub(this.center).divide(this.radius);return l.setFaceNormal(e,d),l.material=this.material,l.t=u,!0}}class C{textureData;context;image;clearColor=0;height;width;constructor(e){const{canvas:t,context:r,offscreen:i}=e;this.width=t.width,this.height=t.height,this.context=t.getContext(this.getContextId(r),this.getOptions(r,i)),this.textureData=new Uint8ClampedArray(this.width*this.height*4),this.image=new ImageData(this.textureData,this.width,this.height)}getContextId(e){switch(e){case"WebGPU":return"webgpu";case"WebGL2":return"webgl2";case"WebGL":return"webgl";default:return"2d"}}getOptions(e,t=!1){switch(e){case"WebGPU":return;case"Canvas2D":return{willReadFrequently:!t,desynchronized:t,colorSpace:"srgb",alpha:!0};default:return{powerPreference:"high-performance",failIfMajorPerformanceCaveat:!0,preserveDrawingBuffer:!1,desynchronized:!t,premultipliedAlpha:!0,antialias:!0,stencil:!1,depth:!1,alpha:!0}}}setImageData(e){for(let t=0,r=0;t<e.length;t+=3,r+=4)this.image.data[r]=e[t],this.image.data[r+1]=e[t+1],this.image.data[r+2]=e[t+2],this.image.data[r+3]=255}}var J="struct VertexOutput{@location(0)coords: vec2f,@builtin(position)position: vec4f};@group(0)@binding(0)var texture: texture_2d<f32>;@group(0)@binding(1)var textureSampler: sampler;@vertex fn mainVertex(@builtin(vertex_index)index: u32)->VertexOutput{let position=array(vec2f(0.0,0.0),vec2f(1.0,0.0),vec2f(1.0,1.0),vec2f(1.0,1.0),vec2f(0.0,1.0),vec2f(0.0,0.0));var output: VertexOutput;let coords=position[index];output.position=vec4f(coords*2-1,0,1);output.coords=coords;return output;}@fragment fn mainFragment(@location(0)coords: vec2f)->@location(0)vec4f{return textureSample(texture,textureSampler,coords);}",ee="override size: u32;struct Ray{origin: vec3f,direction: vec3f};fn at(ray: Ray,t: f32)->vec3f{return ray.origin+ray.direction*t;}const INFINITY=3.40282346638528859812e+38f;const PI=radians(180.0);var<private>rnd: vec3u;fn initializeRandom(invocation: vec3u){const A=vec3(1741651*1009,140893*1609*13,6521*983*7*2);rnd=(invocation*A)^ tracer.seed;}fn random()->f32{const C=vec3(60493*9377,11279*2539*23,7919*631*5*3);rnd=(rnd*C)^(rnd.yzx>>vec3(4u));return f32(rnd.x ^ rnd.y)/f32(0xffffffff);}fn randomMinMax(mi: f32,ma: f32)->f32{return random()*(ma-mi)+mi;}fn degToRad(deg: f32)->f32{return deg*PI/180.0;}fn nearZero(vec: vec3f)->bool{return(abs(vec.x)<1e-8f)&&(abs(vec.y)<1e-8f)&&(abs(vec.z)<1e-8f);}fn randomVec()->vec3f{return vec3f(random(),random(),random());}fn randomMinMaxVec(mi: f32,ma: f32)->vec3f{return vec3f(randomMinMax(mi,ma),randomMinMax(mi,ma),randomMinMax(mi,ma));}fn lengthSquared(vec: vec3f)->f32{return dot(vec,vec);}fn randomUnitDisk()->vec3f{let rand=random();let x=rand*2.0-1.0;let y=randomMinMax(-2.0,2.0)*sqrt(rand*-rand+rand);return vec3f(x,y,0.0);}fn randomUnitSphere()->vec3f{for(;;){let rand=randomMinMaxVec(-1.0,1.0);if(lengthSquared(rand)<1.0){return rand;}}}fn randomNormalized()->vec3f{return normalize(randomUnitSphere());}fn randomHemisphere(normal: vec3f)->vec3f{let unitSphere=randomUnitSphere();return select(-unitSphere,unitSphere,dot(unitSphere,normal)>0.0);}struct Camera{u: vec3f,v: vec3f,origin: vec3f,vertical: vec3f,horizontal: vec3f,lowerLeftCorner: vec3f,lensRadius: f32};fn getRay(camera: Camera,s: f32,t: f32)->Ray{let randomDisk=randomUnitDisk()*camera.lensRadius;let offset=camera.u*randomDisk.x+camera.v*randomDisk.y;return Ray(camera.origin+offset,camera.lowerLeftCorner+camera.horizontal*s+camera.vertical*t-camera.origin-offset);}const LAMBERTIAN=0u;const METAL=1u;const DIELECTRIC=2u;struct Material{scattered: Ray,attenuation: vec3f,scatter: bool};struct Record{t: f32,point: vec3f,normal: vec3f,material: vec4f,frontFace: bool};var<private>record=Record();fn setFaceNormal(ray: Ray,outwardNormal: vec3f){record.frontFace=dot(ray.direction,outwardNormal)<0.0;record.normal=select(-outwardNormal,outwardNormal,record.frontFace);}struct Sphere{transform: vec4f,material: vec4f};fn sphereHit(ray: Ray,tMin: f32,tMax: f32,sphere: Sphere)->bool{let oc=ray.origin-sphere.transform.xyz;let a=lengthSquared(ray.direction);let halfB=dot(oc,ray.direction);let radius=sphere.transform.w;let c=lengthSquared(oc)-radius*radius;let d=halfB*halfB-a*c;if(d<0.0){return false;}let sqrtD=sqrt(d);var root=(-halfB-sqrtD)/a;if(root<tMin||root>tMax){root=(-halfB+sqrtD)/a;if(root<tMin||root>tMax){return false;}}record.t=root;record.point=at(ray,root);record.material=sphere.material;setFaceNormal(ray,(record.point-sphere.transform.xyz)/radius);return true;}fn hitObject(ray: Ray,tMin: f32,tMax: f32)->bool{var hit=false;var closest=tMax;for(var s=0u;s<SPHERES;s++){if(sphereHit(ray,tMin,closest,spheres[s])){closest=record.t;hit=true;}}return hit;}fn metalScatter(material: vec4f,ray: Ray)->Material{let reflected=reflect(normalize(ray.direction),record.normal)+randomUnitSphere()*material.a;let scattered=Ray(record.point,reflected);return Material(scattered,material.rgb,dot(scattered.direction,record.normal)>0.0f);}fn reflectance(cosine: f32,ratio: f32)->f32{var reflectance=(1.0-ratio)/(1.0+ratio);reflectance=reflectance*reflectance;return pow((1.0-cosine),5.0)*(1.0-reflectance)+reflectance;}fn dielectricScatter(material: vec4f,ray: Ray)->Material{var direction=normalize(ray.direction);let tCos=min(dot(-direction,record.normal),1.0);let ratio=select(material.a,1.0/material.a,record.frontFace);let willReflect=random()<reflectance(tCos,ratio)||sqrt(1.0-tCos*tCos)*ratio>1.0;direction=select(refract(direction,record.normal,ratio),reflect(direction,record.normal),willReflect);return Material(Ray(record.point,direction),material.rgb,true);}fn lambertianScatter(material: vec4f)->Material{var direction=record.normal+randomNormalized();if(nearZero(direction)){direction=record.normal;}return Material(Ray(record.point,direction),material.rgb,true);}const WHITE=vec3f(1.0,1.0,1.0);const SKY=vec3f(0.5,0.7,1.0);fn skyColor(ray: Ray)->vec3f{let direction=normalize(ray.direction);let t=(direction.y+1.0)*0.5;return(1.0-t)*WHITE+SKY*t;}fn getColor(ray: Ray,depth: u32)->vec3f{var color=WHITE;var scatteredRay=ray;for(var d=depth;d>0u;d--){if(hitObject(scatteredRay,0.001,INFINITY)){var scattered: Ray;var material: Material;if(record.material.a>1.0){material=dielectricScatter(record.material,scatteredRay);}else if(record.material.a>-1.0){material=metalScatter(record.material,scatteredRay);}else{material=lambertianScatter(record.material);}if(material.scatter){scatteredRay=material.scattered;color*=material.attenuation;}}else{color*=skyColor(scatteredRay);break;}}return color;}fn inputColor(color: vec3f,samples: u32)->vec3f{return color*color*f32(samples-1u);}fn outputColor(color: vec3f,samples: u32)->vec3f{var output=color/f32(samples);output=sqrt(output);return output;}struct Tracer{maxDepth: u32,samples: u32,seed: vec3u};@group(0)@binding(0)var<uniform>tracer: Tracer;@group(0)@binding(1)var<storage,read>camera: Camera;@group(0)@binding(2)var<storage,read>spheres: array<Sphere,SPHERES>;@group(0)@binding(3)var<storage,read_write>colorBuffer: array<vec3f>;@group(0)@binding(4)var framebuffer: texture_storage_2d<rgba16float,write>;@compute @workgroup_size(size,size)fn mainCompute(@builtin(global_invocation_id)globalInvocation: vec3u){let res=vec2f(textureDimensions(framebuffer));let coord=vec2f(globalInvocation.xy);if(all(coord<res)){let bufferIndex=u32(coord.x+coord.y*res.x);var color=colorBuffer[bufferIndex];initializeRandom(globalInvocation);color=inputColor(color,tracer.samples);let u=(coord.x+random())/res.x;let v=(coord.y+random())/res.y;let ray=getRay(camera,u,v);color+=getColor(ray,tracer.maxDepth);colorBuffer[bufferIndex]=outputColor(color,tracer.samples);textureStore(framebuffer,globalInvocation.xy,vec4f(colorBuffer[bufferIndex],1.0));}}";class te extends C{samples=0;device;adapter;format;imageTexture;imageBindGroup;imagePipeline;tracerBuffer;computeBindGroup;computePipeline;tracer=new Uint32Array(8);workgroupCount=[0,0];draw=this.drawImage.bind(this,void 0);constructor(e,t){super(e),this.initializeWebGPU().then(this.createRenderPipeline.bind(this,e.tracer,t)).catch(r=>g.dispatch("WebGPU::Init::Fail",r.message))}async initializeWebGPU(){if(!navigator.gpu)throw new Error("WebGPU is not supported on this browser.");if(!this.context)throw new Error("Failed to initialize WebGPU context.");const e=await navigator.gpu.requestAdapter({powerPreference:"high-performance",forceFallbackAdapter:!1});if(e)this.adapter=e;else throw new Error("No appropriate GPUAdapter found.");const t=[];if(this.format=navigator.gpu.getPreferredCanvasFormat(),this.format==="bgra8unorm"&&t.push("bgra8unorm-storage"),!this.adapter.features.has("bgra8unorm-storage"))throw new Error('"bgra8unorm-storage" is not supported on this GPUAdapter.');this.device=await this.adapter.requestDevice({requiredFeatures:t}),this.context.configure({usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.STORAGE_BINDING,device:this.device,format:this.format})}createRenderPipeline(e,t){this.clear(),e==="WebGPU"?this.createComputePipeline():this.createImagePipeline(),t?.()}createComputePipeline(){const e=new z;this.createImagePipeline(!0);const{width:t,height:r}=M,i=e.hittables.length,s=16-+(this.device.limits.maxComputeInvocationsPerWorkgroup<256)*8,[n,h]=this.createBuffers(e.createSpheresUniforms()),f=this.device.createBindGroupLayout({label:"Compute Bind Group Layout",entries:[{binding:0,buffer:{type:"uniform"},visibility:GPUShaderStage.COMPUTE},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},{binding:2,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},{binding:3,buffer:{type:"storage"},visibility:GPUShaderStage.COMPUTE},{binding:4,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:this.imageTexture.format}}]}),o=this.device.createPipelineLayout({bindGroupLayouts:[f],label:"Compute Pipeline Layout"}),u=this.device.createBuffer({label:"Compute Color Buffer",usage:GPUBufferUsage.STORAGE,size:t*r*16});this.computeBindGroup=this.device.createBindGroup({layout:f,label:"Compute Bind Group",entries:[{binding:0,resource:{buffer:this.tracerBuffer}},{binding:1,resource:{buffer:n}},{binding:2,resource:{buffer:h}},{binding:3,resource:{buffer:u}},{binding:4,resource:this.imageTexture.createView()}]});const d=this.device.createShaderModule({code:`const SPHERES = ${i}u;
${ee}`,label:"Compute Shader"});this.computePipeline=this.device.createComputePipeline({layout:o,label:"Compute Pipeline",compute:{constants:{size:s},module:d,entryPoint:"mainCompute"}}),this.workgroupCount[0]=Math.ceil(t/s),this.workgroupCount[1]=Math.ceil(r/s),e.dispose()}createImagePipeline(e=!1){const t=e&&"Framebuffer Texture"||"CPU Computed Image",r=e&&GPUTextureUsage.STORAGE_BINDING||0,i=e&&"rgba16float"||"rgba8unorm";this.imageTexture=this.device.createTexture({size:[360,240],format:i,label:t,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|r});const s=this.device.createShaderModule({label:"Image Shader",code:J});this.imagePipeline=this.device.createRenderPipeline({label:"Image Pipeline",layout:"auto",vertex:{entryPoint:"mainVertex",module:s},fragment:{targets:[{format:this.format}],entryPoint:"mainFragment",module:s}}),this.imageBindGroup=this.device.createBindGroup({layout:this.imagePipeline.getBindGroupLayout(0),label:"Image Bind Group",entries:[{binding:0,resource:this.imageTexture.createView()},{binding:1,resource:this.sampler}]})}drawImage(e){if(e)return this.setActiveTexture(e);const t=this.device.createCommandEncoder(),r=t.beginComputePass();this.tracer[1]=++this.samples,this.tracer[4]=Math.random()*4294967295,this.tracer[5]=Math.random()*4294967295,this.tracer[6]=Math.random()*4294967295,this.device.queue.writeBuffer(this.tracerBuffer,0,this.tracer),r.setPipeline(this.computePipeline),r.setBindGroup(0,this.computeBindGroup),r.dispatchWorkgroups(...this.workgroupCount),r.end();const i=t.beginRenderPass({colorAttachments:[{view:this.context.getCurrentTexture().createView(),storeOp:"store",loadOp:"clear"}]});i.setBindGroup(0,this.imageBindGroup),i.setPipeline(this.imagePipeline),i.draw(6),i.end(),this.samples<500&&requestAnimationFrame(this.draw),this.device.queue.submit([t.finish()]),g.dispatch("WebGPU::Stats::Update",{sample:this.samples})}createBuffers(e){this.tracer[0]=50,this.tracerBuffer=this.device.createBuffer({usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:"Compute Tracer Uniform",size:this.tracer.byteLength});const{u:t,v:r,origin:i,vertical:s,horizontal:n,lowerLeftCorner:h,lensRadius:f}=new F().uniform,o=new Float32Array(24),u=this.device.createBuffer({usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,label:"Compute Camera Storage Buffer",size:o.byteLength});o[0]=t[0],o[1]=t[1],o[2]=t[2],o[4]=r[0],o[5]=r[1],o[6]=r[2],o[8]=i[0],o[9]=i[1],o[10]=i[2],o[12]=s[0],o[13]=s[1],o[14]=s[2],o[16]=n[0],o[17]=n[1],o[18]=n[2],o[20]=h[0],o[21]=h[1],o[22]=h[2],o[23]=f,this.device.queue.writeBuffer(u,0,o);const d=new Float32Array(e.length*8),v=this.device.createBuffer({usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,label:"Compute Spheres Storage Buffer",size:d.byteLength});for(let m=0,p=0,N=e.length;m<N;m++,p+=8)d[p+0]=e[m].center[0],d[p+1]=e[m].center[1],d[p+2]=e[m].center[2],d[p+3]=e[m].radius,d[p+4]=e[m].material.albedo[0],d[p+5]=e[m].material.albedo[1],d[p+6]=e[m].material.albedo[2],d[p+7]=e[m].material.extra;return this.device.queue.writeBuffer(v,0,d),[u,v]}setActiveTexture(e){const t=this.device.createCommandEncoder(),{width:r,height:i}=M;this.setImageData(e),this.device.queue.copyExternalImageToTexture({source:this.image,flipY:!0},{texture:this.imageTexture},{width:r,height:i});const s=t.beginRenderPass({colorAttachments:[{view:this.context.getCurrentTexture().createView(),storeOp:"store",loadOp:"clear"}]});s.setBindGroup(0,this.imageBindGroup),s.setPipeline(this.imagePipeline),s.draw(6),s.end(),this.device.queue.submit([t.finish()])}clear(){const e=this.device.createCommandEncoder(),t=_(this.clearColor,1),r=t.get("r")??0,i=t.get("g")??0,s=t.get("b")??0;e.beginRenderPass({colorAttachments:[{view:this.context.getCurrentTexture().createView(),clearValue:[r,i,s,1],storeOp:"store",loadOp:"clear"}]}).end(),this.device.queue.submit([e.finish()])}get sampler(){return this.device.createSampler({addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge",minFilter:"linear",magFilter:"linear"})}get ready(){return!!this.imagePipeline}}var B=`#version 300 es
#ifndef GL_FRAGMENT_PRECISION_HIGH
precision mediump float;
#else
precision highp float;
#endif
in vec2 position;in vec2 coords;out vec2 uv;void main(void){gl_Position=vec4((position*2.0-1.0)*vec2(1.0,-1.0),0.0,1.0);uv=coords;}`,re=`#version 300 es
#ifndef GL_FRAGMENT_PRECISION_HIGH
precision mediump float;
#else
precision highp float;
#endif
uniform sampler2D tex;in vec2 uv;out vec4 fragColor;void main(void){fragColor=texture(tex,uv);}`,ie=`#ifndef GL_FRAGMENT_PRECISION_HIGH
precision mediump float;
#else
precision highp float;
#endif
uniform sampler2D tex;varying vec2 uv;void main(void){gl_FragColor=texture2D(tex,uv);}`,ae=`#ifndef GL_FRAGMENT_PRECISION_HIGH
precision mediump float;
#else
precision highp float;
#endif
attribute vec2 position;attribute vec2 coords;varying vec2 uv;void main(void){gl_Position=vec4((position*2.0-1.0)*vec2(1.0,-1.0),0.0,1.0);uv=coords;}`;class k extends C{texture;program;constructor(e,t=ie,r=ae){super(e),this.createProgram(t,r),this.createScene(),this.clear()}loadShader(e,t){const r=this.context.createShader(t);return this.context.shaderSource(r,e),this.context.compileShader(r),this.context.getShaderParameter(r,this.context.COMPILE_STATUS)?r:(console.error(`An error occurred compiling the shaders: ${this.context.getShaderInfoLog(r)}`),this.context.deleteShader(r))}createProgram(e,t){const r=this.loadShader(e,this.context.FRAGMENT_SHADER),i=this.loadShader(t,this.context.VERTEX_SHADER);if(this.program=this.context.createProgram(),i&&r&&(this.context.attachShader(this.program,r),this.context.attachShader(this.program,i),this.context.linkProgram(this.program)),!this.context.getProgramParameter(this.program,this.context.LINK_STATUS))return console.error(`Unable to initialize shader program: ${this.context.getProgramInfoLog(this.program)}`);this.context.clear(this.context.COLOR_BUFFER_BIT);const s=_(this.clearColor,1),n=s.get("r")??0,h=s.get("g")??0,f=s.get("b")??0;this.context.clearColor(n,h,f,1),this.context.useProgram(this.program)}setTextureParameters(){this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_S,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_T,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_MIN_FILTER,this.context.LINEAR),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_MAG_FILTER,this.context.LINEAR)}setBufferData(){this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array([0,0,1,0,1,1,1,1,0,1,0,0]),this.context.STATIC_DRAW)}setActiveTexture(e=this.textureData,t=this.texture){this.context.activeTexture(this.context.TEXTURE0),this.context.bindTexture(this.context.TEXTURE_2D,t),this.context.texImage2D(this.context.TEXTURE_2D,0,this.context.RGB,this.width,this.height,0,this.context.RGB,this.context.UNSIGNED_BYTE,e)}createScene(){const e=this.context.getAttribLocation(this.program,"coords");this.context.bindBuffer(this.context.ARRAY_BUFFER,this.context.createBuffer()),this.setBufferData(),this.context.enableVertexAttribArray(e),this.context.vertexAttribPointer(e,2,this.context.FLOAT,!1,0,0);const t=this.context.getAttribLocation(this.program,"position");this.context.bindBuffer(this.context.ARRAY_BUFFER,this.context.createBuffer()),this.setBufferData(),this.context.enableVertexAttribArray(t),this.context.vertexAttribPointer(t,2,this.context.FLOAT,!1,0,0),this.texture=this.context.createTexture(),this.setBufferData(),this.setActiveTexture(),this.setTextureParameters()}drawImage(e){this.setActiveTexture(e),this.context.drawArrays(this.context.TRIANGLES,0,6)}clear(){this.context.clear(this.context.COLOR_BUFFER_BIT)}}class se extends k{samples=0;texture1;texture2;frameBuffer1;frameBuffer2;seedUniform;samplesUniform;draw=this.drawImage.bind(this,void 0);constructor(e,t=re){if(e.tracer!=="WebGL2")super(e,t,B);else{const r=new z,i=r.hittables.length;super(e,t.replace("#version 300 es",`#version 300 es
#define SPHERES ${i}u`),B),this.createUniforms(r.createSpheresUniforms()),this.createFrameBufferTextures(),r.dispose()}}bindFrameBufferTextures(e,t){this.context.bindFramebuffer(this.context.FRAMEBUFFER,e),this.context.framebufferTexture2D(this.context.FRAMEBUFFER,this.context.COLOR_ATTACHMENT0,this.context.TEXTURE_2D,t,0)}createFrameBufferTextures(){this.texture1=this.context.createTexture(),this.setActiveTexture(this.textureData,this.texture1),this.setTextureParameters(),this.texture2=this.context.createTexture(),this.setActiveTexture(null,this.texture2),this.setTextureParameters(),this.frameBuffer1=this.context.createFramebuffer(),this.bindFrameBufferTextures(this.frameBuffer1,this.texture1),this.frameBuffer2=this.context.createFramebuffer(),this.bindFrameBufferTextures(this.frameBuffer2,this.texture2)}createUniforms(e){this.seedUniform=this.context.getUniformLocation(this.program,"seed"),this.samplesUniform=this.context.getUniformLocation(this.program,"samples"),this.context.uniform1ui(this.context.getUniformLocation(this.program,"maxDepth"),50),this.context.uniform2f(this.context.getUniformLocation(this.program,"resolution"),this.width,this.height);const{u:t,v:r,origin:i,vertical:s,horizontal:n,lowerLeftCorner:h,lensRadius:f}=new F().uniform;this.context.uniform3fv(this.context.getUniformLocation(this.program,"camera.lowerLeftCorner"),h),this.context.uniform1f(this.context.getUniformLocation(this.program,"camera.lensRadius"),f),this.context.uniform3fv(this.context.getUniformLocation(this.program,"camera.horizontal"),n),this.context.uniform3fv(this.context.getUniformLocation(this.program,"camera.vertical"),s),this.context.uniform3fv(this.context.getUniformLocation(this.program,"camera.origin"),i),this.context.uniform3fv(this.context.getUniformLocation(this.program,"camera.v"),r),this.context.uniform3fv(this.context.getUniformLocation(this.program,"camera.u"),t);for(let o=0,u=e.length;o<u;o++){const d=this.context.getUniformLocation(this.program,`spheres[${o}].material`),v=this.context.getUniformLocation(this.program,`spheres[${o}].transform`);this.context.uniform4fv(d,[...e[o].material.albedo,e[o].material.extra]),this.context.uniform4fv(v,[...e[o].center,e[o].radius])}}drawImage(e){if(e)return super.drawImage(e);this.context.uniform3ui(this.seedUniform,Math.random()*4294967295,Math.random()*4294967295,Math.random()*4294967295),this.context.uniform1ui(this.samplesUniform,++this.samples),this.samples<500&&requestAnimationFrame(this.draw),this.context.bindFramebuffer(this.context.FRAMEBUFFER,this.frameBuffer2),this.context.bindTexture(this.context.TEXTURE_2D,this.texture1),this.context.drawArrays(this.context.TRIANGLES,0,6),this.context.bindFramebuffer(this.context.FRAMEBUFFER,null),this.context.bindTexture(this.context.TEXTURE_2D,this.texture2),this.context.drawArrays(this.context.TRIANGLES,0,6);const t=this.frameBuffer1;this.frameBuffer1=this.frameBuffer2,this.frameBuffer2=t;const r=this.texture1;this.texture1=this.texture2,this.texture2=r,g.dispatch("WebGL2::Stats::Update",{sample:this.samples})}}class oe extends C{constructor(e){super(e),this.clear(),this.context.imageSmoothingEnabled=!0,this.context.imageSmoothingQuality="high",this.image=this.context.getImageData(0,0,this.width,this.height)}drawImage(e){this.setImageData(e),this.context.putImageData(this.image,0,0)}clear(){this.context.fillStyle=j(this.clearColor),this.context.clearRect(0,0,this.width,this.height),this.context.fillRect(0,0,this.width,this.height)}}class ne{sample=0;trace;format;collect;tracer;context;f32=new Float32Array(360*240*3);u8=new Uint8ClampedArray(360*240*3);canvas;worker;samples=500;constructor(e){this.canvas=this.createCanvas(e),this.tracer=this.getTracer(e),this.context=e.context,(this.worker=e.worker)?this.createWorkerEvents():this.loadTracer()}createCanvas(e){switch(e.context){case"WebGPU":return new te(e,e.worker?this.onCreateTracer.bind(this):this.onLoadTracer.bind(this));case"WebGL2":return new se(e);case"WebGL":return new k(e);default:return new oe(e)}}getTracer(e){return e.tracer!=="AssemblyScript"?"TypeScript":"AssemblyScript"}createWorkerEvents(){this.worker?.post("Create::Tracer",{tracer:this.tracer}),this.worker?.add("Create::Tracer",this.onCreateTracer.bind(this))}onCreateTracer(){this.canvasContextReady&&(this.worker?.add("Create::PPMImage",this.showPPMImage.bind(this)),g.dispatch(`${this.tracer}::Start`),this.createPPMImage())}loadTracer(){(this.tracer==="AssemblyScript"?import("./release-JMadKTiW.js"):import("./Tracer-KUVFbBg6.js")).then(({trace:e,format:t,collect:r})=>{this.collect=r,this.format=t,this.trace=e,this.onLoadTracer()})}onLoadTracer(){this.canvasContextReady&&(g.dispatch(`${this.tracer}::Start`,null,!0),this.createPPMImage())}createPPMImage(e=!1){if(this.worker)return this.worker.post("Create::PPMImage",{download:e});this.tracer==="AssemblyScript"?(this.f32=Float32Array.from(this.trace(this.f32)),this.u8=Uint8ClampedArray.from(this.format(this.f32,this.u8,++this.sample)),!(this.sample%100)&&this.collect()):this.format(this.trace(this.f32),this.u8,++this.sample),this.showPPMImage({pixels:this.u8,sample:this.sample,download:e},!0)}showPPMImage(e,t){const r=e;this.canvas.drawImage(r.pixels),this.samples===r.sample||!(this.worker?r.sample:this.sample)?r.download&&this.downloadPPMImage(r.pixels,t):setTimeout(this.createPPMImage.bind(this,r.download),X),g.dispatch(`${this.tracer}::Stats::Update`,{sample:r.sample},t)}downloadPPMImage(e,t){let r=`P3
${this.canvas.width} ${this.canvas.height}
255
`;for(let i=0;i<e.length;i+=3)r+=`${e[i]} ${e[i+1]} ${e[i+2]}
`;g.dispatch("PPMImage::Download",{image:r},t)}get canvasContextReady(){return this.context==="WebGPU"?this.canvas.ready:!0}}class ce extends CustomEvent{data}class he{target=new EventTarget;events=new Map;callbacks=new Map;add(e,t){const r=this.callbacks.get(e);r?r.push(t):this.callbacks.set(e,[t]),this.events.set(e,new ce(e)),this.target.addEventListener(e,t,!1)}dispatch(e,t){const r=this.events.get(e);r&&(r.data=t,this.target.dispatchEvent(r))}remove(e,t){const r=this.callbacks.get(e);if(r&&t){const i=r.indexOf(t),s=t;i!==-1&&r.splice(i,1),this.target.removeEventListener(e,s,!1)}t||(r?.forEach(i=>this.target.removeEventListener(e,i,!1)),this.callbacks.delete(e),this.events.delete(e))}dispose(){this.callbacks.clear(),this.events.clear()}}class A{constructor(e){this.worker=e}add(e,t){this.worker.add(e,t)}static dispatch(e,t){de.postMessage({name:e,response:{data:t}})}remove(e){this.worker.remove(e)}dispose(){this.worker.dispose()}}class le extends he{offscreen=!1;workerEvents;createWorkerEvents(e,t){this.workerEvents=new A(e),this.offscreen=t}add(e,t){this.offscreen?this.workerEvents?.add(e,t):super.add(e,t)}dispatch(e,t,r=!1){r?A.dispatch(e,t):super.dispatch(e,t)}remove(e,t){this.offscreen?this.workerEvents?.remove(e):super.remove(e,t)}dispose(){this.workerEvents?.dispose(),super.dispose()}}var g=new le;let E=0,I,G,L,R=new Float32Array(360*240*3),S=new Uint8ClampedArray(360*240*3);self.onerror=a=>console.error(a);self.onmessage=async a=>{const{event:e}=a.data;let{params:t}=a.data;switch(e){case"Transfer::Offscreen":return new ne({offscreen:!0,...t});case"Create::Tracer":{const r=await(t.tracer==="AssemblyScript"?import("./release-JMadKTiW.js"):import("./Tracer-KUVFbBg6.js"));L=r.collect,G=r.format,I=r.trace;break}case"Create::PPMImage":{R=new Float32Array(I(R)),S=new Uint8ClampedArray(G(R,S,++E)),t={sample:E,pixels:S,...t},!(E%100)&&L();break}}self.postMessage({response:t,name:e})};var de=self;export{F as C,l as R,c as V,z as W,pe as f,fe as h,ue as m,me as w};
