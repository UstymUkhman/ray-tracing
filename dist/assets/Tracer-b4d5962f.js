import{r as g,c as f,d as D,f as T,C as m,t as y}from"./index-e8a12bdc.js";class n{vec=[0,0,0];constructor(t=0,e=t,i=t){this.vec[0]=t,this.vec[1]=e,this.vec[2]=i}multiply(t){if(typeof t!="number")return this.set(this.vec[0]*t.x,this.vec[1]*t.y,this.vec[2]*t.z);const e=t;return this.vec[0]*=e,this.vec[1]*=e,this.vec[2]*=e,this}divide(t){return typeof t=="number"?this.multiply(1/t):this.set(this.vec[0]/t.x,this.vec[1]/t.y,this.vec[2]/t.z)}get(t){return t===void 0?this.vec:this.vec[t]}refract(t,e){const i=Math.min(this.clone.negate.dot(t),1);this.copy(t.clone.multiply(i).add(this).multiply(e));const s=Math.abs(1-this.lengthSquared);return this.add(t.multiply(-Math.sqrt(s)))}set(t,e,i){return this.vec[0]=t,this.vec[1]=e,this.vec[2]=i,this}randomHemisphere(t){return this.randomUnitSphere,this.dot(t)>0?this:this.negate}random(t=0,e=1){return this.set(g(t,e),g(t,e),g(t,e))}reflect(t){return this.sub(t.clone.multiply(this.dot(t)*2))}get randomUnitVector(){return this.randomUnitSphere.unitVector}get randomUnitSphere(){for(;;)if(this.random(-1).lengthSquared<1)return this}get lengthSquared(){return this.dot(this)}get randomUnitDisk(){for(;;)if(this.random(-1),this.vec[2]=0,this.lengthSquared<1)return this}cross(t){return this.set(this.vec[1]*t.z-this.vec[2]*t.y,this.vec[2]*t.x-this.vec[0]*t.z,this.vec[0]*t.y-this.vec[1]*t.x)}dot(t){return this.vec[0]*t.x+this.vec[1]*t.y+this.vec[2]*t.z}copy(t){const{x:e,y:i,z:s}=t;return this.set(e,i,s)}add(t){return this.vec[0]+=t.x,this.vec[1]+=t.y,this.vec[2]+=t.z,this}sub(t){return this.vec[0]-=t.x,this.vec[1]-=t.y,this.vec[2]-=t.z,this}get nearZero(){return Math.abs(this.vec[0])<1e-8&&Math.abs(this.vec[1])<1e-8&&Math.abs(this.vec[2])<1e-8}get unitVector(){return this.divide(this.length)}get length(){return Math.sqrt(this.lengthSquared)}get clone(){return new n(this.vec[0],this.vec[1],this.vec[2])}reset(t=0){return this.set(t,t,t)}get print(){const[t,e,i]=this.vec;return`Vector3 { x: ${t}, y: ${e}, z: ${i} }`}get negate(){return this.vec[0]*=-1,this.vec[1]*=-1,this.vec[2]*=-1,this}get sqrt(){return this.set(Math.sqrt(this.vec[0]),Math.sqrt(this.vec[1]),Math.sqrt(this.vec[2]))}get rgb(){return this.set(f(this.vec[0]*256|0,0,255),f(this.vec[1]*256|0,0,255),f(this.vec[2]*256|0,0,255))}get x(){return this.vec[0]}get y(){return this.vec[1]}get z(){return this.vec[2]}}class L{t=0;frontFace=!1;material;point=new n;normal=new n;copy(t){this.frontFace=t.frontFace,this.normal.copy(t.normal),this.point.copy(t.point),this.t=t.t}setFaceNormal(t,e){this.frontFace=t.direction.dot(e)<0,this.normal.copy(this.frontFace?e:e.negate)}}const p=new L;class C{}class P extends C{objects=[];constructor(t){super(),t&&this.add(t)}add(t){this.objects.push(t)}hit(t,e,i,s){let r=!1,o=i;for(let h=0,l=this.objects.length;h<l;h++)this.objects[h].hit(t,e,o,p)&&(o=p.t,s.copy(p),r=!0);return r}clear(){this.objects.length=0}}class M{}class q extends M{fuzz;albedo;direction=new n;constructor(t,e){super(),this.albedo=t.clone,this.fuzz=Math.min(e,1)}scatter(t,e,i,s){const r=t.direction.unitVector.reflect(e.normal);return this.direction.randomUnitSphere.multiply(this.fuzz).add(r),i.direction=this.direction,i.origin=e.point,s.copy(this.albedo),this.direction.dot(e.normal)>0}}class b extends M{albedo;direction=new n;constructor(t){super(),this.albedo=t.clone}scatter(t,e,i,s){const r=e.normal.add(this.direction.randomUnitVector);return r.nearZero&&r.copy(e.normal),i.direction=r,i.origin=e.point,s.copy(this.albedo),!0}}class x extends M{constructor(t){super(),this.refraction=t}reflectance(t,e){const i=Math.pow((1-e)/(1+e),2);return Math.pow(1-t,5)*(1-i)+i}scatter(t,e,i,s){const r=t.direction.unitVector,o=Math.min(r.clone.negate.dot(e.normal),1),h=e.frontFace?1/this.refraction:this.refraction;return Math.sqrt(1-o*o)*h>1||Math.random()<this.reflectance(o,h)?r.reflect(e.normal):r.refract(e.normal,h),i.direction=r,i.origin=e.point,s.reset(1),!0}}class I{hittables=new P;color=new n;constructor(){this.addSphere(new n(0,-1e3,0),1e3,new b(new n(.5))),this.generateSmallSpheres(),this.addSphere(new n(0,1,0),1,new x(1.5)),this.addSphere(new n(-4,1,0),1,new b(new n(.4,.2,.1))),this.addSphere(new n(4,1,0),1,new q(new n(.7,.6,.5),0))}addSphere(t,e,i){this.hittables.add(new k(t,e,i))}generateSmallSpheres(){for(let t=-11;t<11;t++)for(let e=-11;e<11;e++){const i=new n(Math.random()*.9+t,.2,Math.random()*.9+e),s=new n(4,.2,0);if(i.clone.sub(s).length>.9){const r=Math.random();if(r<.8){this.color.random().multiply(this.color.random());const o=new b(this.color);this.addSphere(i,.2,o)}else if(r<.95){this.color.random(.5);const o=g(0,.5),h=new q(this.color,o);this.addSphere(i,.2,h)}else{const o=new x(1.5);this.addSphere(i,.2,o)}}}}get objects(){return this.hittables}}class k extends C{constructor(t,e,i){super(),this.center=t,this.radius=e,this.material=i}hit(t,e,i,s){const r=t.origin.clone.sub(this.center),o=t.direction.lengthSquared,h=r.dot(t.direction),l=r.lengthSquared-this.radius*this.radius,u=h*h-o*l;if(u<0)return!1;const d=Math.sqrt(u);let a=(-h-d)/o;if((a<e||a>i)&&(a=(-h+d)/o,a<e||a>i))return!1;s.t=a,s.point.copy(t.at(s.t));const w=s.point.clone.sub(this.center).divide(this.radius);return s.setFaceNormal(t,w),s.material=this.material,!0}}class H{u;v;width;height;origin;vertical;lensRadius;horizontal;random=new n;lowerLeftCorner;constructor(t,e,i,s,r,o,h){const l=t.clone.sub(e).unitVector,u=Math.tan(D(s)*.5);this.u=i.cross(l).unitVector,this.v=l.clone.cross(this.u),this.origin=t,this.height=u*2,this.width=r*this.height,this.lensRadius=o*.5,this.horizontal=this.u.clone.multiply(this.width).multiply(h),this.vertical=this.v.clone.multiply(this.height).multiply(h),this.lowerLeftCorner=this.origin.clone.sub(this.horizontal.clone.divide(2)).sub(this.vertical.clone.divide(2)).sub(l.multiply(h))}setRay(t,e,i){const s=this.random.randomUnitDisk.multiply(this.lensRadius),r=this.u.clone.multiply(s.x).add(this.v.clone.multiply(s.y));t.direction=this.lowerLeftCorner.clone.add(this.horizontal.clone.multiply(e)).add(this.vertical.clone.multiply(i)).sub(this.origin).sub(r),t.origin=r.add(this.origin)}}class S{constructor(t=new n,e=new n){this.orig=t,this.dir=e}color=new n(1);far=1/0;near=.001;at(t){return this.orig.clone.add(this.dir.clone.multiply(t))}getColor(t,e,i){if(!i)return this.color.reset();if(e.hit(t,this.near,this.far,p)){const r=new n,o=new S;return p.material.scatter(t,p,o,r)?this.getColor(o,e,i-1).multiply(r):this.color.reset()}const s=(t.dir.unitVector.y+1)*.5;return this.color.reset(1).multiply(1-s).add(new n(.5,.7,1).multiply(s))}set direction(t){this.dir.copy(t)}get direction(){return this.dir}set origin(t){this.orig.copy(t)}get origin(){return this.orig}}class Z{last=Date.now();camera;world=new I;color=new n;width=m.width;height=m.height;depth=m.maxDepth;samples=m.samples;constructor(){const t=this.width/this.height;this.camera=new H(new n(13,2,3),new n(0,0,0),new n(0,1,0),20,t,.1,10)}createPPMImage(t,e,i){const s=new S,r=this.samples===e;for(let d=0,a=this.height,w=this.width-1,z=a-1;a--;){r&&console.info(`Progress: ${y((1-a/z)*100)}%`);for(let v=0;v<this.width;v++,d+=3){this.color.set(t[d],t[d+1],t[d+2]);const R=(v+Math.random())/w,V=(a+Math.random())/z;this.camera.setRay(s,R,V);const{x:F,y:U,z:j}=this.color.add(s.getColor(s,this.world.objects,this.depth));t[d]=F,t[d+1]=U,t[d+2]=j}}const o=Date.now(),h=`${r&&"Total "||""}Samples: ${e}`,l=`Total Time: ${y((o-i)/1e3)} sec.`,u=`Last Render Time: ${y((o-this.last)/1e3)} sec.`;console.info(`${h} | ${u} | ${l}`),this.last=o}}const $=new Z,N=(c,t,e,i=$.samples)=>{const s=new n;return $.createPPMImage(t,i,c),T(e,t,s,i)};export{N as trace};
