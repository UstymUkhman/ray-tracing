import{V as n,r as M,d as S,f as v,C as m}from"./index-95384807.js";class C{t=0;frontFace=!1;material;point=new n;normal=new n;setFaceNormal(t,e){this.frontFace=t.direction.dot(e)<0,this.normal.copy(this.frontFace?e:e.negate)}}const a=new C;class y{}class R extends y{objects=[];constructor(){super()}add(t){this.objects.push(t)}hit(t,e,i){let r=!1,s=i;for(let o=0,h=this.objects.length;o<h;o++)this.objects[o].hit(t,e,s)&&(s=a.t,r=!0);return r}}class f{}class g extends f{fuzz;albedo;direction=new n;constructor(t,e){super(),this.albedo=t.clone,this.fuzz=Math.min(e,1)}scatter(t,e,i){const r=t.direction.normalize.reflect(a.normal);return this.direction.randomUnitSphere.multiply(this.fuzz).add(r),e.direction=this.direction,e.origin=a.point,i.copy(this.albedo),this.direction.dot(a.normal)>0}}class w extends f{albedo;direction=new n;constructor(t){super(),this.albedo=t.clone}scatter(t,e,i){const r=a.normal.clone.add(this.direction.randomNormalized);return r.nearZero&&r.copy(a.normal),e.direction=r,e.origin=a.point,i.copy(this.albedo),!0}}class b extends f{constructor(t){super(),this.refraction=t}reflectance(t,e){const i=Math.pow((1-e)/(1+e),2);return Math.pow(1-t,5)*(1-i)+i}scatter(t,e,i){const r=t.direction.normalize,s=Math.min(r.clone.negate.dot(a.normal),1),o=a.frontFace?1/this.refraction:this.refraction;return Math.sqrt(1-s*s)*o>1||Math.random()<this.reflectance(s,o)?r.reflect(a.normal):r.refract(a.normal,o),e.direction=r,e.origin=a.point,i.reset(1),!0}}class j{hittables=new R;color=new n;constructor(){this.addSphere(1e3,new n(0,-1e3,0),new w(new n(.5))),this.generateSmallSpheres(),this.addSphere(1,new n(0,1,0),new b(1.5)),this.addSphere(1,new n(-4,1,0),new w(new n(.4,.2,.1))),this.addSphere(1,new n(4,1,0),new g(new n(.7,.6,.5),0))}addSphere(t,e,i){this.hittables.add(new F(t,e,i))}generateSmallSpheres(){for(let t=-11;t<11;t++)for(let e=-11;e<11;e++){const i=new n(Math.random()*.9+t,.2,Math.random()*.9+e),r=new n(4,.2,0);if(i.clone.sub(r).length>.9){const s=Math.random();if(s<.8){this.color.random().multiply(this.color.random());const o=new w(this.color);this.addSphere(.2,i,o)}else if(s<.95){this.color.random(.5);const o=M(0,.5),h=new g(this.color,o);this.addSphere(.2,i,h)}else{const o=new b(1.5);this.addSphere(.2,i,o)}}}}get objects(){return this.hittables}}class F extends y{constructor(t,e,i){super(),this.radius=t,this.center=e,this.material=i}hit(t,e,i){const r=t.origin.clone.sub(this.center),s=t.direction.lengthSquared,o=r.dot(t.direction),h=r.lengthSquared-this.radius*this.radius,l=o*o-s*h;if(l<0)return!1;const u=Math.sqrt(l);let d=(-o-u)/s;if((d<e||d>i)&&(d=(-o+u)/s,d<e||d>i))return!1;a.point.copy(t.at(d));const z=a.point.clone.sub(this.center).divide(this.radius);return a.setFaceNormal(t,z),a.material=this.material,a.t=d,!0}}class q{u;v;width;height;origin;vertical;lensRadius;horizontal;random=new n;lowerLeftCorner;constructor(t,e,i,r,s,o,h){const l=t.clone.sub(e).normalize,u=Math.tan(S(r)*.5);this.u=i.cross(l).normalize,this.v=l.clone.cross(this.u),this.origin=t,this.height=u*2,this.width=s*this.height,this.lensRadius=o*.5,this.horizontal=this.u.clone.multiply(this.width).multiply(h),this.vertical=this.v.clone.multiply(this.height).multiply(h),this.lowerLeftCorner=this.origin.clone.sub(this.horizontal.clone.divide(2)).sub(this.vertical.clone.divide(2)).sub(l.multiply(h))}setRay(t,e,i){const r=this.random.randomUnitDisk.multiply(this.lensRadius),s=this.u.clone.multiply(r.x).add(this.v.clone.multiply(r.y));t.direction=this.lowerLeftCorner.clone.add(this.horizontal.clone.multiply(e)).add(this.vertical.clone.multiply(i)).sub(this.origin).sub(s),t.origin=s.add(this.origin)}}class p{constructor(t=new n,e=new n){this.orig=t,this.dir=e}color=new n(1);far=1/0;near=.001;at(t){return this.orig.clone.add(this.dir.clone.multiply(t))}getColor(t,e,i){if(!i)return this.color.reset();if(e.hit(t,this.near,this.far)){const s=new n,o=new p;return a.material.scatter(t,o,s)?this.getColor(o,e,i-1).multiply(s):this.color.reset()}const r=(t.dir.normalize.y+1)*.5;return this.color.reset(1).multiply(1-r).add(new n(.5,.7,1).multiply(r))}set direction(t){this.dir.copy(t)}get direction(){return this.dir}set origin(t){this.orig.copy(t)}get origin(){return this.orig}}class L{camera;world=new j;color=new n;width=m.width;height=m.height;depth=m.maxDepth;constructor(){const t=this.width/this.height;this.camera=new q(new n(13,2,3),new n(0,0,0),new n(0,1,0),20,t,.1,10)}createPPMImage(t){const e=new p;for(let i=0,r=this.height,s=this.width-1,o=r-1;r--;)for(let h=0;h<this.width;h++,i+=3){this.color.set(t[i],t[i+1],t[i+2]);const l=(h+Math.random())/s,u=(r+Math.random())/o;this.camera.setRay(e,l,u),this.color.add(e.getColor(e,this.world.objects,this.depth)),t[i]=this.color.x,t[i+1]=this.color.y,t[i+2]=this.color.z}return t}}const D=new L;function P(c){return D.createPPMImage(c)}function T(c,t,e){return v(c,t,e)}export{T as format,P as trace};
