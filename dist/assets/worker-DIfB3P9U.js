const v=(a,e=0,t=1)=>Math.max(e,Math.min(a,t)),p=(a,e)=>Math.random()*(e-a)+a,ae=a=>a*Math.PI/180,z=16.666666666666668;class o{vec=[0,0,0];constructor(e=0,t=e,r=e){this.vec[0]=e,this.vec[1]=t,this.vec[2]=r}refract(e,t){const r=Math.min(this.clone.negate.dot(e),1);this.copy(e.clone.multiply(r).add(this).multiply(t));const i=Math.abs(1-this.lengthSquared);return this.add(e.multiply(-Math.sqrt(i)))}set(e,t,r){return this.vec[0]=e,this.vec[1]=t,this.vec[2]=r,this}multiply(e){if(typeof e!="number")return this.set(this.vec[0]*e.x,this.vec[1]*e.y,this.vec[2]*e.z);const t=e;return this.vec[0]*=t,this.vec[1]*=t,this.vec[2]*=t,this}divide(e){return typeof e=="number"?this.multiply(1/e):this.set(this.vec[0]/e.x,this.vec[1]/e.y,this.vec[2]/e.z)}random(e=0,t=1){return this.set(p(e,t),p(e,t),p(e,t))}reflect(e){return this.sub(e.clone.multiply(this.dot(e)*2))}get randomNormalized(){return this.randomUnitSphere.normalize}get randomUnitSphere(){for(;;)if(this.random(-1).lengthSquared<1)return this}get lengthSquared(){return this.dot(this)}get randomUnitDisk(){for(;;)if(this.random(-1),this.vec[2]=0,this.lengthSquared<1)return this}cross(e){return this.set(this.vec[1]*e.z-this.vec[2]*e.y,this.vec[2]*e.x-this.vec[0]*e.z,this.vec[0]*e.y-this.vec[1]*e.x)}dot(e){return this.vec[0]*e.x+this.vec[1]*e.y+this.vec[2]*e.z}copy(e){const{x:t,y:r,z:i}=e;return this.set(t,r,i)}add(e){return this.vec[0]+=e.x,this.vec[1]+=e.y,this.vec[2]+=e.z,this}sub(e){return this.vec[0]-=e.x,this.vec[1]-=e.y,this.vec[2]-=e.z,this}get nearZero(){return Math.abs(this.vec[0])<1e-8&&Math.abs(this.vec[1])<1e-8&&Math.abs(this.vec[2])<1e-8}get normalize(){return this.divide(this.length)}get length(){return Math.sqrt(this.lengthSquared)}get clone(){return new o(this.vec[0],this.vec[1],this.vec[2])}reset(e=0){return this.set(e,e,e)}get negate(){return this.multiply(-1)}get sqrt(){return this.set(Math.sqrt(this.vec[0]),Math.sqrt(this.vec[1]),Math.sqrt(this.vec[2]))}get rgb(){return this.set(v(this.vec[0]*256|0,0,255),v(this.vec[1]*256|0,0,255),v(this.vec[2]*256|0,0,255))}get x(){return this.vec[0]}get y(){return this.vec[1]}get z(){return this.vec[2]}get(){return[...this.vec]}}const D=(a,e=1)=>new Map([["r",a>>16&e],["g",a>>8&e],["b",a&e]]),O=(a,e)=>a.divide(e).sqrt.rgb,k=a=>`#${`000000${a.toString(16)}`.slice(-6)}`,ne=(a,e,t)=>{const r=new o;for(let i=0;i<a.length;i+=3){const{x:s,y:n,z:h}=O(r.set(a[i],a[i+1],a[i+2]),t);e[i]=s,e[i+1]=n,e[i+2]=h}return e},F=50,P=500,d=240,l=360,W=!1;var S=Object.freeze({__proto__:null,height:d,log:W,maxDepth:F,samples:P,width:l});class y{textureData;context;image;clearColor=0;height;width;constructor(e){const{canvas:t,context:r,offscreen:i}=e;this.width=t.width,this.height=t.height,this.context=t.getContext(this.getContextId(r),this.getOptions(r,i)),this.textureData=new Uint8ClampedArray(this.width*this.height*4),this.image=new ImageData(this.textureData,this.width,this.height)}getContextId(e){switch(e){case"WebGPU":return"webgpu";case"WebGL2":return"webgl2";case"WebGL":return"webgl";default:return"2d"}}getOptions(e,t=!1){switch(e){case"WebGPU":return;case"Canvas2D":return{willReadFrequently:!t,desynchronized:t,colorSpace:"srgb",alpha:!0};default:return{powerPreference:"high-performance",failIfMajorPerformanceCaveat:!0,preserveDrawingBuffer:!1,desynchronized:!t,premultipliedAlpha:!0,antialias:!0,stencil:!1,depth:!1,alpha:!0}}}setImageData(e){for(let t=0,r=0;t<e.length;t+=3,r+=4)this.image.data[r]=e[t],this.image.data[r+1]=e[t+1],this.image.data[r+2]=e[t+2],this.image.data[r+3]=255}}var A="struct VertexOutput{@location(0)coords: vec2f,@builtin(position)position: vec4f};@group(0)@binding(0)var texture: texture_2d<f32>;@group(0)@binding(1)var textureSampler: sampler;@vertex fn mainVertex(@builtin(vertex_index)index: u32)->VertexOutput{let position=array(vec2f(0.0,1.0),vec2f(1.0,1.0),vec2f(0.0,0.0),vec2f(0.0,0.0),vec2f(1.0,0.0),vec2f(1.0,1.0));var output: VertexOutput;let coords=position[index];output.position=vec4f(coords*2-1,0,1);output.coords=coords;return output;}@fragment fn mainFragment(@location(0)coords: vec2f)->@location(0)vec4f{return textureSample(texture,textureSampler,coords);}",q="override size: u32;struct Ray{origin: vec3f,direction: vec3f};fn at(ray: Ray,t: f32)->vec3f{return ray.origin+ray.direction*t;}struct Record{t: f32,point: vec3f,normal: vec3f,frontFace: bool};var<private>record=Record();fn setFaceNormal(ray: Ray,outwardNormal: vec3f){record.frontFace=dot(ray.direction,outwardNormal)<0.0;record.normal=select(-outwardNormal,outwardNormal,record.frontFace);}struct Sphere{transform: vec4f};fn sphereHit(ray: Ray,tMin: f32,tMax: f32,sphere: Sphere)->f32{let oc=ray.origin-sphere.transform.xyz;let a=lengthSquared(ray.direction);let halfB=dot(oc,ray.direction);let radius=sphere.transform.w;let c=lengthSquared(oc)-radius*radius;let d=halfB*halfB-a*c;if(d<0.0){return-1.0;}let sqrtD=sqrt(d);var root=(-halfB-sqrtD)/a;if(root<tMin||root>tMax){root=(-halfB+sqrtD)/a;if(root<tMin||root>tMax){return-1.0;}}record.t=root;record.point=at(ray,root);setFaceNormal(ray,(record.point-sphere.transform.xyz)/radius);return root;}const WHITE=vec3f(1.0,1.0,1.0);const SKY=vec3f(0.5,0.7,1.0);fn skyColor(ray: Ray)->vec3f{let direction=normalize(ray.direction);let t=(direction.y+1.0)*0.5;return(1.0-t)*WHITE+SKY*t;}fn getColor(ray: Ray)->vec3f{let s=Sphere(vec4f(0.0,0.0,-1.0,0.5));let t=sphereHit(ray,0.001,INFINITY,s);if(t>0.0){let normal=normalize(at(ray,t)-vec3(0.0,0.0,-1.0));return vec3f(normal.x+1.0,normal.y+1.0,normal.z+1.0)*0.5;}return skyColor(ray);}const PI=radians(180.0);const INFINITY=3.40282346638528859812e+38f;fn random(seed: vec2f)->f32{return fract(sin(dot(seed,vec2f(12.9898,78.233)))*43758.5453123);}fn randomMinMax(seed: vec2f,mi: f32,ma: f32)->f32{return random(seed)*(ma-mi)+mi;}fn nearZero(vec: vec3f)->bool{return(abs(vec.x)<1e-8f)&&(abs(vec.y)<1e-8f)&&(abs(vec.z)<1e-8f);}fn randomVec(seed: vec2f)->vec3f{return vec3f(random(seed*0.123),random(seed*0.456),random(seed*0.789));}fn randomMinMaxVec(seed: vec2f,mi: f32,ma: f32)->vec3f{return vec3f(randomMinMax(seed*0.123,mi,ma),randomMinMax(seed*0.456,mi,ma),randomMinMax(seed*0.789,mi,ma));}fn lengthSquared(vec: vec3f)->f32{return dot(vec,vec);}fn randomUnitDisk(seed: vec2f)->vec3f{let rand=random(seed*0.02468);let x=rand*2.0-1.0;let y=randomMinMax(seed*0.13579,-2.0,2.0)*sqrt(rand*-rand+rand);return vec3f(x,y,0.0);}fn randomUnitSphere(seed: vec2f)->vec3f{for(;;){let rand=randomMinMaxVec(seed,-1.0,1.0);if(lengthSquared(rand)<1.0){return rand;}}}fn randomNormalized(seed: vec2f)->vec3f{return normalize(randomUnitSphere(seed));}fn randomHemisphere(normal: vec3f,seed: vec2f)->vec3f{let unitSphere=randomUnitSphere(seed);return select(-unitSphere,unitSphere,dot(unitSphere,normal)>0.0);}@group(0)@binding(0)var framebuffer: texture_storage_2d<rgba16float,write>;const WIDTH=360;const HEIGHT=240;const RATIO=16.0/9.0;const FOCAL_LENGTH=1.0;const ORIGIN=vec3f(0.0);const VIEWPORT_HEIGHT=2.0;const VIEWPORT_WIDTH=RATIO*VIEWPORT_HEIGHT;const VERTICAL=vec3(0.0,VIEWPORT_HEIGHT,0.0);const HORIZONTAL=vec3f(VIEWPORT_WIDTH,0.0,0.0);const LOWER_LEFT_CORNER=ORIGIN-HORIZONTAL*0.5-VERTICAL*0.5-vec3f(0.0,0.0,FOCAL_LENGTH);@compute @workgroup_size(size,size)fn mainCompute(@builtin(global_invocation_id)invocation_id: vec3u){if(all(invocation_id.xy<textureDimensions(framebuffer))){let uv=vec2f(invocation_id.xy)/vec2f(textureDimensions(framebuffer).xy);let ray=Ray(ORIGIN,LOWER_LEFT_CORNER+HORIZONTAL*uv.x+VERTICAL*uv.y-ORIGIN);let color=vec4f(getColor(ray),1.0);textureStore(framebuffer,invocation_id.xy,color);}}";class H extends y{device;adapter;format;imageTexture;imageBindGroup;imagePipeline;tracerBindGroup;computeBindGroup;tracerPipeline;computePipeline;workgroupCount=[0,0];constructor(e,t){super(e),this.initializeWebGPU().then(this.createRenderPipeline.bind(this,e.tracer,t)).catch(r=>f.dispatch("WebGPU::Init::Fail",r.message))}async initializeWebGPU(){if(!navigator.gpu)throw new Error("WebGPU is not supported on this browser.");if(!this.context)throw new Error("Failed to initialize WebGPU context.");const e=await navigator.gpu.requestAdapter({powerPreference:"high-performance",forceFallbackAdapter:!1});if(e)this.adapter=e;else throw new Error("No appropriate GPUAdapter found.");const t=[];if(this.format=navigator.gpu.getPreferredCanvasFormat(),this.format==="bgra8unorm"&&t.push("bgra8unorm-storage"),!this.adapter.features.has("bgra8unorm-storage"))throw new Error('"bgra8unorm-storage" is not supported on this GPUAdapter.');this.device=await this.adapter.requestDevice({requiredFeatures:t}),this.context.configure({usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.STORAGE_BINDING,device:this.device,format:this.format})}createRenderPipeline(e,t){this.clear(),e==="WebGPU"?this.createTracerPipeline():this.createImagePipeline(),t?.()}createComputePipeline(e=16){const t=this.device.createTexture({size:[l,d],label:"Framebuffer Texture",format:"rgba16float",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING}),r=this.device.createBindGroupLayout({label:"Compute Bind Group Layout",entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:t.format}}]}),i=this.device.createPipelineLayout({bindGroupLayouts:[r],label:"Compute Pipeline Layout"});this.computeBindGroup=this.device.createBindGroup({layout:r,label:"Compute Bind Group",entries:[{binding:0,resource:t.createView()}]});const s=this.device.createShaderModule({label:"Compute Shader",code:q});return this.computePipeline=this.device.createComputePipeline({layout:i,label:"Compute Pipeline",compute:{constants:{size:e},module:s,entryPoint:"mainCompute"}}),this.workgroupCount[0]=Math.ceil(l/e),this.workgroupCount[1]=Math.ceil(d/e),t}createTracerPipeline(){const e=this.createComputePipeline(),t=this.device.createShaderModule({label:"Tracer Shader",code:A});this.tracerPipeline=this.device.createRenderPipeline({label:"Tracer Pipeline",layout:"auto",vertex:{entryPoint:"mainVertex",module:t},fragment:{targets:[{format:this.format}],entryPoint:"mainFragment",module:t}}),this.tracerBindGroup=this.device.createBindGroup({layout:this.tracerPipeline.getBindGroupLayout(0),label:"Tracer Bind Group",entries:[{binding:0,resource:e.createView()},{binding:1,resource:this.sampler}]})}createImagePipeline(){const{width:e,height:t}=S;this.imageTexture=this.device.createTexture({label:"CPU Computed Image",size:[e,t],format:"rgba8unorm",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST});const r=this.device.createShaderModule({label:"Image Shader",code:A});this.imagePipeline=this.device.createRenderPipeline({label:"Image Pipeline",layout:"auto",vertex:{entryPoint:"mainVertex",module:r},fragment:{targets:[{format:this.format}],entryPoint:"mainFragment",module:r}}),this.imageBindGroup=this.device.createBindGroup({layout:this.imagePipeline.getBindGroupLayout(0),entries:[{binding:0,resource:this.imageTexture.createView()},{binding:1,resource:this.sampler}]})}setActiveTexture(e){const t=this.device.createCommandEncoder(),{width:r,height:i}=S;this.setImageData(e),this.device.queue.copyExternalImageToTexture({source:this.image,flipY:!0},{texture:this.imageTexture},{width:r,height:i});const s=t.beginRenderPass({colorAttachments:[{view:this.context.getCurrentTexture().createView(),storeOp:"store",loadOp:"clear"}]});s.setBindGroup(0,this.imageBindGroup),s.setPipeline(this.imagePipeline),s.draw(6),s.end(),this.device.queue.submit([t.finish()])}drawImage(e){if(e)return this.setActiveTexture(e);const t=this.device.createCommandEncoder(),r=t.beginComputePass();r.setPipeline(this.computePipeline),r.setBindGroup(0,this.computeBindGroup),r.dispatchWorkgroups(...this.workgroupCount),r.end();const i=t.beginRenderPass({colorAttachments:[{view:this.context.getCurrentTexture().createView(),storeOp:"store",loadOp:"clear"}]});i.setBindGroup(0,this.tracerBindGroup),i.setPipeline(this.tracerPipeline),i.draw(6),i.end(),this.device.queue.submit([t.finish()])}clear(){const e=this.device.createCommandEncoder(),t=D(this.clearColor,1),r=t.get("r")??0,i=t.get("g")??0,s=t.get("b")??0;e.beginRenderPass({colorAttachments:[{view:this.context.getCurrentTexture().createView(),clearValue:[r,i,s,1],storeOp:"store",loadOp:"clear"}]}).end(),this.device.queue.submit([e.finish()])}get sampler(){return this.device.createSampler({addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge",minFilter:"linear",magFilter:"linear"})}get ready(){return!!this.imagePipeline}}class V{t=0;frontFace=!1;material;point=new o;normal=new o;setFaceNormal(e,t){this.frontFace=e.direction.dot(t)<0,this.normal.copy(this.frontFace?t:t.negate)}}var c=new V;class L{}class $ extends L{objects=[];constructor(){super()}add(e){this.objects.push(e)}hit(e,t,r){let i=!1,s=r;for(let n=0,h=this.objects.length;n<h;n++)this.objects[n].hit(e,t,s)&&(s=c.t,i=!0);return i}get hittables(){return this.objects}dispose(){this.objects.length=0}}class X{list=new $;color=new o;constructor(){this.addSphere(1e3,new o(0,-1e3,0),new g(new o(.5))),this.generateSmallSpheres(),this.addSphere(1,new o(0,1,0),new E(1.5)),this.addSphere(1,new o(-4,1,0),new g(new o(.4,.2,.1))),this.addSphere(1,new o(4,1,0),new w(new o(.7,.6,.5),0))}addSphere(e,t,r){this.list.add(new Y(e,t,r))}generateSmallSpheres(){for(let e=-11;e<11;e++)for(let t=-11;t<11;t++){const r=new o(Math.random()*.9+e,.2,Math.random()*.9+t),i=new o(4,.2,0);if(r.clone.sub(i).length>.9){const s=Math.random();if(s<.8){this.color.random().multiply(this.color.random());const n=new g(this.color);this.addSphere(.2,r,n)}else if(s<.95){this.color.random(.5);const n=p(0,.5),h=new w(this.color,n);this.addSphere(.2,r,h)}else{const n=new E(1.5);this.addSphere(.2,r,n)}}}}get hittables(){return this.list.hittables}get objects(){return this.list}dispose(){this.list.dispose(),this.color.reset()}}class Y extends L{constructor(e,t,r){super(),this.radius=e,this.center=t,this.material=r}hit(e,t,r){const i=e.origin.clone.sub(this.center),s=e.direction.lengthSquared,n=i.dot(e.direction),h=i.lengthSquared-this.radius*this.radius,m=n*n-s*h;if(m<0)return!1;const I=Math.sqrt(m);let u=(-n-I)/s;if((u<t||u>r)&&(u=(-n+I)/s,u<t||u>r))return!1;c.point.copy(e.at(u));const N=c.point.clone.sub(this.center).divide(this.radius);return c.setFaceNormal(e,N),c.material=this.material,c.t=u,!0}}class R{}class w extends R{fuzz;albedo;direction=new o;constructor(e,t){super(),this.albedo=e.clone,this.fuzz=Math.min(t,1)}scatter(e,t,r){const i=e.direction.normalize.reflect(c.normal);return this.direction.randomUnitSphere.multiply(this.fuzz).add(i),t.direction=this.direction,t.origin=c.point,r.copy(this.albedo),this.direction.dot(c.normal)>0}}class g extends R{albedo;direction=new o;constructor(e){super(),this.albedo=e.clone}scatter(e,t,r){const i=c.normal.clone.add(this.direction.randomNormalized);return i.nearZero&&i.copy(c.normal),t.direction=i,t.origin=c.point,r.copy(this.albedo),!0}}class E extends R{constructor(e){super(),this.refraction=e}reflectance(e,t){const r=Math.pow((1-t)/(1+t),2);return Math.pow(1-e,5)*(1-r)+r}scatter(e,t,r){const i=e.direction.normalize,s=Math.min(i.clone.negate.dot(c.normal),1),n=c.frontFace?1/this.refraction:this.refraction;return Math.sqrt(1-s*s)*n>1||Math.random()<this.reflectance(s,n)?i.reflect(c.normal):i.refract(c.normal,n),t.direction=i,t.origin=c.point,r.reset(1),!0}}var j=`#ifndef GL_FRAGMENT_PRECISION_HIGH
precision mediump float;
#else
precision highp float;
#endif
uniform sampler2D tex;varying vec2 uv;void main(void){gl_FragColor=texture2D(tex,uv);}`,Z="precision mediump float;uniform vec2 resolution;attribute vec2 position;attribute vec2 coords;varying vec2 uv;void main(void){gl_Position=vec4((position/resolution*2.0-1.0)*vec2(1.0,-1.0),0.0,1.0);uv=coords;}";class B extends y{texture;program;constructor(e,t=j,r=Z){super(e),this.createProgram(t,r),this.createScene(),this.clear()}loadShader(e,t){const r=this.context.createShader(t);return this.context.shaderSource(r,e),this.context.compileShader(r),this.context.getShaderParameter(r,this.context.COMPILE_STATUS)?r:(console.error(`An error occurred compiling the shaders: ${this.context.getShaderInfoLog(r)}`),this.context.deleteShader(r))}setBufferData(e=this.width,t=this.height){this.context.bufferData(this.context.ARRAY_BUFFER,new Float32Array([0,0,e,0,0,t,0,t,e,0,e,t]),this.context.STATIC_DRAW)}createProgram(e,t){const r=this.loadShader(e,this.context.FRAGMENT_SHADER),i=this.loadShader(t,this.context.VERTEX_SHADER);if(this.program=this.context.createProgram(),i&&r&&(this.context.attachShader(this.program,r),this.context.attachShader(this.program,i),this.context.linkProgram(this.program)),!this.context.getProgramParameter(this.program,this.context.LINK_STATUS))return console.error(`Unable to initialize shader program: ${this.context.getProgramInfoLog(this.program)}`);this.context.clear(this.context.COLOR_BUFFER_BIT);const s=D(this.clearColor,1),n=s.get("r")??0,h=s.get("g")??0,m=s.get("b")??0;this.context.clearColor(n,h,m,1),this.context.useProgram(this.program)}setTextureParameters(){this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_S,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_WRAP_T,this.context.CLAMP_TO_EDGE),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_MIN_FILTER,this.context.LINEAR),this.context.texParameteri(this.context.TEXTURE_2D,this.context.TEXTURE_MAG_FILTER,this.context.LINEAR)}setActiveTexture(e=this.textureData,t=this.texture){this.context.activeTexture(this.context.TEXTURE0),this.context.bindTexture(this.context.TEXTURE_2D,t),this.context.texImage2D(this.context.TEXTURE_2D,0,this.context.RGB,this.width,this.height,0,this.context.RGB,this.context.UNSIGNED_BYTE,e)}createScene(){const e=this.context.getAttribLocation(this.program,"coords");this.context.bindBuffer(this.context.ARRAY_BUFFER,this.context.createBuffer()),this.setBufferData(1,1),this.context.enableVertexAttribArray(e),this.context.vertexAttribPointer(e,2,this.context.FLOAT,!1,0,0);const t=this.context.getAttribLocation(this.program,"position");this.context.bindBuffer(this.context.ARRAY_BUFFER,this.context.createBuffer()),this.setBufferData(),this.context.enableVertexAttribArray(t),this.context.vertexAttribPointer(t,2,this.context.FLOAT,!1,0,0);const r=this.context.getUniformLocation(this.program,"resolution");this.context.uniform2f(r,this.width,this.height),this.texture=this.context.createTexture(),this.setBufferData(),this.setActiveTexture(),this.setTextureParameters()}drawImage(e){this.setActiveTexture(e),this.context.drawArrays(this.context.TRIANGLES,0,6)}clear(){this.context.clear(this.context.COLOR_BUFFER_BIT)}}var K=`#version 300 es
#ifndef GL_FRAGMENT_PRECISION_HIGH
precision mediump float;
#else
precision highp float;
#endif
uniform sampler2D tex;in vec2 uv;out vec4 fragColor;void main(void){fragColor=texture(tex,uv);}`,C=`#version 300 es
#ifndef GL_FRAGMENT_PRECISION_HIGH
precision mediump float;
#else
precision highp float;
#endif
uniform vec2 resolution;uniform float height;uniform float width;in vec2 position;in vec2 coords;out vec2 uv;
#ifdef CAMERA
#define SIMPLE_RANDOM
struct Ray{vec3 origin;vec3 direction;};vec3 at(in Ray ray,in float t){return ray.origin+ray.direction*t;}
#define INFINITY 1.0 / 0.0
#define PI 3.14159265358979323846
#ifndef SIMPLE_RANDOM
uniform uvec3 rand;uvec3 rnd=uvec3(0);uvec3 depthSeed=uvec3(1);void initializeRandom(void){uvec3 A=uvec3(1741651*1009,140893*1609*13,6521*983*7*2);rnd=(depthSeed*A)^ rand;}float random(in vec2 seed){uvec3 C=uvec3(60493*9377,11279*2539*23,7919*631*5*3);rnd=(rnd*C)^(rnd.yzx>>uvec3(4u));return float(rnd.x ^ rnd.y)/4294967295.0;}
#else
float random(in vec2 seed){return fract(sin(dot(seed,vec2(12.9898,78.233)))*43758.5453123);}
#endif
float random(in vec2 seed,in float mi,in float ma){return random(seed)*(ma-mi)+mi;}float degToRad(in float deg){return deg*PI/180.0;}bool nearZero(in vec3 vec){return(abs(vec.x)<1e-8)&&(abs(vec.y)<1e-8)&&(abs(vec.z)<1e-8);}vec3 randomVec(in vec2 seed){return vec3(random(seed*0.123),random(seed*0.456),random(seed*0.789));}vec3 randomVec(in vec2 seed,in float mi,in float ma){return vec3(random(seed*0.123,mi,ma),random(seed*0.456,mi,ma),random(seed*0.789,mi,ma));}float lengthSquared(in vec3 vec){return dot(vec,vec);}vec3 randomUnitDisk(in vec2 seed){float rand=random(seed*0.02468);float x=rand*2.0-1.0;float y=random(seed*0.13579,-2.0,2.0)*sqrt(rand*-rand+rand);return vec3(x,y,0.0);}vec3 randomUnitSphere(in vec2 seed){for(;;){vec3 rand=randomVec(seed,-1.0,1.0);if(lengthSquared(rand)<1.0)return rand;}}vec3 randomNormalized(in vec2 seed){return normalize(randomUnitSphere(seed));}vec3 randomHemisphere(in vec3 normal,in vec2 seed){vec3 unitSphere=randomUnitSphere(seed);return dot(unitSphere,normal)>0.0? unitSphere :-unitSphere;}struct Camera{vec3 u;vec3 v;vec3 origin;vec3 vertical;vec3 horizontal;float lensRadius;vec3 lowerLeftCorner;};Camera createCamera(const in vec3 origin,const in vec3 lookAt,const in vec3 vUp,const in vec2 res,const in float fov,const in float aperture,const in float focusDist){float height=tan(degToRad(fov)*0.5)*2.0;float width=res.x/res.y*height;vec3 w=normalize(origin-lookAt);vec3 u=normalize(cross(vUp,w));vec3 v=cross(w,u);vec3 vertical=v*height*focusDist;vec3 horizontal=u*width*focusDist;return Camera(u,v,origin,vertical,horizontal,aperture*0.5,origin-horizontal*0.5-vertical*0.5-focusDist*w);}Ray getRay(Camera camera,in float s,in float t,in vec2 seed){vec3 randomDisk=randomUnitDisk(seed)*camera.lensRadius;vec3 offset=camera.u*randomDisk.x+camera.v*randomDisk.y;return Ray(camera.origin+offset,camera.lowerLeftCorner+camera.horizontal*s+camera.vertical*t-camera.origin-offset);}out Camera camera;
#endif
void main(void){
#ifdef CAMERA
vec2 res=vec2(width,height);camera=createCamera(vec3(13.0,2.0,3.0),vec3(0.0,0.0,0.0),vec3(0.0,1.0,0.0),res,20.0,0.1,10.0);
#endif
gl_Position=vec4((position/resolution*2.0-1.0)*vec2(1.0,-1.0),0.0,1.0);uv=coords;}`;class Q extends B{samples=0;texture1;texture2;frameBuffer1;frameBuffer2;randomUniform;samplesUniform;draw=this.drawImage.bind(this,void 0);constructor(e,t=K){if(e.tracer!=="WebGL2")super(e,t,C);else{const r=new X,i=r.hittables.length;super(e,t.replace("#version 300 es",`#version 300 es
#define SPHERES ${i}u`),C.replace("#version 300 es",`#version 300 es
#define CAMERA`)),this.createWorld(r),this.createFrameBufferTextures()}}bindFrameBufferTextures(e,t){this.context.bindFramebuffer(this.context.FRAMEBUFFER,e),this.context.framebufferTexture2D(this.context.FRAMEBUFFER,this.context.COLOR_ATTACHMENT0,this.context.TEXTURE_2D,t,0)}createWorld(e){const t=[];for(let r=0,i=e.hittables.length;r<i;r++){const s=e.hittables[r],n={albedo:[1,1,1],extra:-1,type:0};s.material instanceof w?(n.albedo=s.material.albedo.get(),n.extra=s.material.fuzz,n.type=1):s.material instanceof E?(n.extra=s.material.refraction,n.type=2):n.albedo=s.material.albedo.get(),t.push({center:s.center.get(),radius:s.radius,material:n})}e.dispose(),this.createUniforms(t)}createFrameBufferTextures(){this.texture1=this.context.createTexture(),this.setActiveTexture(this.textureData,this.texture1),this.setTextureParameters(),this.texture2=this.context.createTexture(),this.setActiveTexture(null,this.texture2),this.setTextureParameters(),this.frameBuffer1=this.context.createFramebuffer(),this.bindFrameBufferTextures(this.frameBuffer1,this.texture1),this.frameBuffer2=this.context.createFramebuffer(),this.bindFrameBufferTextures(this.frameBuffer2,this.texture2)}createUniforms(e){for(let s=0,n=e.length;s<n;s++){const h=this.context.getUniformLocation(this.program,`spheres[${s}].material`),m=this.context.getUniformLocation(this.program,`spheres[${s}].transform`);this.context.uniform4fv(h,[...e[s].material.albedo,e[s].material.extra]),this.context.uniform4fv(m,[...e[s].center,e[s].radius])}this.samplesUniform=this.context.getUniformLocation(this.program,"samples"),this.randomUniform=this.context.getUniformLocation(this.program,"rand");const t=this.context.getUniformLocation(this.program,"maxDepth"),r=this.context.getUniformLocation(this.program,"height"),i=this.context.getUniformLocation(this.program,"width");this.context.uniform1ui(t,F),this.context.uniform1f(r,d),this.context.uniform1f(i,l)}drawImage(e){if(e)return super.drawImage(e);this.context.uniform3ui(this.randomUniform,Math.random()*4294967295,Math.random()*4294967295,Math.random()*4294967295),this.context.uniform1ui(this.samplesUniform,++this.samples),this.samples<P&&requestAnimationFrame(this.draw),this.context.bindFramebuffer(this.context.FRAMEBUFFER,this.frameBuffer2),this.context.bindTexture(this.context.TEXTURE_2D,this.texture1),this.context.drawArrays(this.context.TRIANGLES,0,6),this.context.bindFramebuffer(this.context.FRAMEBUFFER,null),this.context.bindTexture(this.context.TEXTURE_2D,this.texture2),this.context.drawArrays(this.context.TRIANGLES,0,6);const t=this.frameBuffer1;this.frameBuffer1=this.frameBuffer2,this.frameBuffer2=t;const r=this.texture1;this.texture1=this.texture2,this.texture2=r,f.dispatch("WebGL2::Stats::Update",{sample:this.samples})}}class J extends y{constructor(e){super(e),this.clear(),this.context.imageSmoothingEnabled=!0,this.context.imageSmoothingQuality="high",this.image=this.context.getImageData(0,0,this.width,this.height)}drawImage(e){this.setImageData(e),this.context.putImageData(this.image,0,0)}clear(){this.context.fillStyle=k(this.clearColor),this.context.clearRect(0,0,this.width,this.height),this.context.fillRect(0,0,this.width,this.height)}}class ee{sample=0;trace;format;collect;tracer;context;f32=new Float32Array(l*d*3);u8=new Uint8ClampedArray(l*d*3);canvas;worker;samples=P;constructor(e){this.canvas=this.createCanvas(e),this.tracer=this.getTracer(e),this.context=e.context,(this.worker=e.worker)?this.createWorkerEvents():this.loadTracer()}createCanvas(e){switch(e.context){case"WebGPU":return new H(e,e.worker?this.onCreateTracer.bind(this):this.onLoadTracer.bind(this));case"WebGL2":return new Q(e);case"WebGL":return new B(e);default:return new J(e)}}getTracer(e){return e.tracer!=="AssemblyScript"?"TypeScript":"AssemblyScript"}createWorkerEvents(){this.worker?.post("Create::Tracer",{tracer:this.tracer}),this.worker?.add("Create::Tracer",this.onCreateTracer.bind(this))}onCreateTracer(){this.canvasContextReady&&(this.worker?.add("Create::PPMImage",this.showPPMImage.bind(this)),f.dispatch(`${this.tracer}::Start`),this.createPPMImage())}loadTracer(){(this.tracer==="AssemblyScript"?import("./release-Lqg0VSQS.js"):import("./Tracer-wG2RGu38.js")).then(({trace:e,format:t,collect:r})=>{this.collect=r,this.format=t,this.trace=e,this.onLoadTracer()})}onLoadTracer(){this.canvasContextReady&&(f.dispatch(`${this.tracer}::Start`,null,!0),this.createPPMImage())}createPPMImage(e=!1){if(this.worker)return this.worker.post("Create::PPMImage",{download:e});this.tracer==="AssemblyScript"?(this.f32=Float32Array.from(this.trace(this.f32)),this.u8=Uint8ClampedArray.from(this.format(this.f32,this.u8,++this.sample)),!(this.sample%100)&&this.collect()):this.format(this.trace(this.f32),this.u8,++this.sample),this.showPPMImage({pixels:this.u8,sample:this.sample,download:e},!0)}showPPMImage(e,t){const r=e;this.canvas.drawImage(r.pixels),this.samples===r.sample||!(this.worker?r.sample:this.sample)?r.download&&this.downloadPPMImage(r.pixels,t):setTimeout(this.createPPMImage.bind(this,r.download),z),f.dispatch(`${this.tracer}::Stats::Update`,{sample:r.sample},t)}downloadPPMImage(e,t){let r=`P3
${this.canvas.width} ${this.canvas.height}
255
`;for(let i=0;i<e.length;i+=3)r+=`${e[i]} ${e[i+1]} ${e[i+2]}
`;f.dispatch("PPMImage::Download",{image:r},t)}get canvasContextReady(){return this.context==="WebGPU"?this.canvas.ready:!0}}class te extends CustomEvent{data}class re{target=new EventTarget;events=new Map;callbacks=new Map;add(e,t){const r=this.callbacks.get(e);r?r.push(t):this.callbacks.set(e,[t]),this.events.set(e,new te(e)),this.target.addEventListener(e,t,!1)}dispatch(e,t){const r=this.events.get(e);r&&(r.data=t,this.target.dispatchEvent(r))}remove(e,t){const r=this.callbacks.get(e);if(r&&t){const i=r.indexOf(t),s=t;i!==-1&&r.splice(i,1),this.target.removeEventListener(e,s,!1)}t||(r?.forEach(i=>this.target.removeEventListener(e,i,!1)),this.callbacks.delete(e),this.events.delete(e))}dispose(){this.callbacks.clear(),this.events.clear()}}class M{constructor(e){this.worker=e}add(e,t){this.worker.add(e,t)}static dispatch(e,t){se.postMessage({name:e,response:{data:t}})}remove(e){this.worker.remove(e)}dispose(){this.worker.dispose()}}class ie extends re{offscreen=!1;workerEvents;createWorkerEvents(e,t){this.workerEvents=new M(e),this.offscreen=t}add(e,t){this.offscreen?this.workerEvents?.add(e,t):super.add(e,t)}dispatch(e,t,r=!1){r?M.dispatch(e,t):super.dispatch(e,t)}remove(e,t){this.offscreen?this.workerEvents?.remove(e):super.remove(e,t)}dispose(){this.workerEvents?.dispose(),super.dispose()}}var f=new ie;let x=0,U,_,G,b=new Float32Array(l*d*3),T=new Uint8ClampedArray(l*d*3);self.onerror=a=>console.error(a);self.onmessage=async a=>{const{event:e}=a.data;let{params:t}=a.data;switch(e){case"Transfer::Offscreen":return new ee({offscreen:!0,...t});case"Create::Tracer":{const r=await(t.tracer==="AssemblyScript"?import("./release-Lqg0VSQS.js"):import("./Tracer-wG2RGu38.js"));G=r.collect,_=r.format,U=r.trace;break}case"Create::PPMImage":{b=new Float32Array(U(b)),T=new Uint8ClampedArray(_(b,T,++x)),t={sample:x,pixels:T,...t},!(x%100)&&G();break}}self.postMessage({response:t,name:e})};var se=self;export{c as R,o as V,X as W,ae as d,ne as f,d as h,F as m,l as w};
